1. Ascii hex encryption

var out = "";
for (var i=0; i<string.length; i = i + 2) {
    var c = string.substring(i, i+2);
    var g = parseInt(c, 16);
    out = out + String.fromCharCode(g/2);
}
out;

- OR - 

string.replace(/.{2}/g, function(m) {
    return String.fromCharCode(parseInt(m, 16) / 2);
})

2. Base32 Stuff

var chars = string.split(" ");
var out = "";
for (var i=0; i<chars.length; i++) {
    out += String.fromCharCode(parseInt(chars[i], 32));
}
out;

- OR - 

string.replace(/\s/g, "").replace(/.{2}/g, function(m) { return String.fromCharCode(parseInt(m, 32))});

3. Word counts

var words = string.split(" ");
var counts = {};
for (var i=0; i<words.length; i++) {
    var w = words[i];
    if (counts[w] === undefined) {
       counts[w] = 1;
    } else {
        counts[w]++;
    }
}

var wordarr = [];
for (var w in counts) {
    wordarr.push(w);
}
var sorted = wordarr.sort(function(w1, w2) {
    if (counts[w2] < counts[w1]) {
        return 1;
    } else if (counts[w2] > counts[w1]) {
        return -1;
    } else {
        return 0;
    }
});
sorted[sorted.length-1] + " " + sorted[sorted.length-2];

- OR - 

var counts = {}, one, two;
string.split(" ").forEach(function(w) {
  if (counts[w] === undefined) {
      counts[w] = 0;
  }
  counts[w]++;
  if (one === undefined) {
      one = w;
  } else {
      if (two === undefined || counts[w] > counts[one]) {
          two = one;
          one = w;
      } else if (counts[w] > counts[two] && w != one) {
          two = w;
      }
  }
});
one + " " + two;
